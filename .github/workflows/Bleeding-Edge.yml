# This workflow builds on push to main using nuitka for Windows and Linux
name: Build Bleeding-Edge
on:
  push:
    branches:
      - Bleeding-Edge
permissions:
  contents: write
jobs:
  generate-nightly-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate nightly version
        id: set-version
        run: |
          VERSION=nightly-$(date +'%Y%m%d%H%M%S')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build-windows:
    needs: generate-nightly-version
    runs-on: windows-latest
    env:
      CCACHE_DIR: ${{ github.workspace }}\ccache_storage
      CCACHE_CONFIGPATH: ${{ github.workspace }}\ccache.conf
      NUITKA_CACHE_DIR: ${{ github.workspace }}/.nuitka-cache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Show pip cache dir
        run: python -m pip cache dir

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('build_requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      
      - name: Cache ccache storage
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\ccache_storage
          key: ccache-win-${{ hashFiles('build_requirements.txt') }}
          restore-keys: |
            ccache-win-
      
      - name: Cache Nuitka compile cache
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE_DIR }}
          key: nuitka-win-${{ hashFiles('build_requirements.txt') }}
          restore-keys: |
            nuitka-win-
      
      - name: Install official Nuitka ccache (Windows)
        run: |
          curl -L -o ccache.zip https://github.com/ccache/ccache/releases/download/v4.7.4/ccache-4.7.4-windows.zip
          powershell Expand-Archive ccache.zip -DestinationPath ccache-win
          echo "${{ github.workspace }}\ccache-win" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r build_requirements.txt
          pip install nuitka
      
      - name: Inject nightly version into script
        shell: powershell
        run: >
          (Get-Content "The Bibites Mod Manager.py") -replace '__VERSION__', '${{
          needs.generate-nightly-version.outputs.version }}' | Set-Content "The
          Bibites Mod Manager.py"
      
      - name: Build TBMM for Windows
        run: |
          nuitka --mingw64 --onefile --windows-console-mode=attach --windows-icon-from-ico="Images\TBMM icon.ico" --include-data-dir="Images=Images" --include-data-dir="translations=translations" --enable-plugin=tk-inter --assume-yes-for-downloads "The Bibites Mod Manager.py"
      
      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: TBMM-Windows
          path: The Bibites Mod Manager.exe

  build-linux:
    needs: generate-nightly-version
    runs-on: ubuntu-latest
    env:
      NUITKA_CACHE_DIR: ${{ github.workspace }}/.nuitka-cache
      CCACHE_DIR: ${{ github.workspace }}/ccache_storage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Show pip cache dir
        run: python -m pip cache dir

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('build_requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-
      
      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE_DIR }}
          key: nuitka-${{ runner.os }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            nuitka-${{ runner.os }}-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ hashFiles('build_requirements.txt') }}
          restore-keys: |
            ccache-${{ runner.os }}-
      
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y python3-tk ccache
          python -m pip install --upgrade pip
          pip install -r build_requirements.txt
      
      - name: Inject nightly version into script
        run: >
          sed -i "s/__VERSION__/${{ needs.generate-nightly-version.outputs.version
          }}/" "The Bibites Mod Manager.py"
      
      - name: Build TBMM for Linux
        run: >
          nuitka --onefile --include-data-dir="Images=Images" --include-data-dir="translations=translations"
          --enable-plugin=tk-inter --assume-yes-for-downloads "The Bibites Mod
          Manager.py"
      
      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: TBMM-Linux
          path: The\ Bibites\ Mod\ Manager.bin

  build-macos:
    needs: generate-nightly-version
    runs-on: macos-latest
    env:
      NUITKA_CACHE_DIR: ${{ github.workspace }}/.nuitka-cache
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Show pip cache dir
        run: python -m pip cache dir

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            pip-${{ runner.os }}-
      
      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE_DIR }}
          key: nuitka-${{ runner.os }}-${{ hashFiles('**/*.py') }}
          restore-keys: |
            nuitka-${{ runner.os }}-
      
      - name: Install dependencies
        run: |
          brew update
          python -m pip install --upgrade pip
          pip install -r build_requirements.txt
          pip install nuitka
      
      - name: Inject nightly version into script
        run: |
          sed -i '' "s/__VERSION__/${{ needs.generate-nightly-version.outputs.version }}/" "The Bibites Mod Manager.py"
      
      - name: Build TBMM for MacOS
        run: >
          nuitka --mode=app --include-data-dir="Images=Images" --include-data-dir="translations=translations" 
          --enable-plugin=tk-inter --assume-yes-for-downloads "The Bibites Mod
          Manager.py"
      
      - name: Upload Executable
        uses: actions/upload-artifact@v4
        with:
          name: TBMM-MacOS
          path: "The Bibites Mod Manager.app"
  
  build-android:
    needs: generate-nightly-version
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - api-level: '29'
            build-tools: '29.0.3'
          - api-level: 'latest'
            build-tools: 'latest'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('build_requirements_android.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Buildozer global directory
        uses: actions/cache@v4
        with:
          path: ~/.buildozer
          key: ${{ runner.os }}-buildozer-global
          restore-keys: |
            ${{ runner.os }}-buildozer-global

      - name: Cache Buildozer directory in app
        uses: actions/cache@v4
        with:
          path: .buildozer
          key: ${{ runner.os }}-buildozer-app
          restore-keys: |
            ${{ runner.os }}-buildozer-app

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: ~/.buildozer/android/platform/android-sdk
          key: ${{ runner.os }}-android-sdk
          restore-keys: |
            ${{ runner.os }}-android-sdk

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            python3-pip python3-setuptools python3-dev \
            autoconf automake build-essential git \
            libtool libssl-dev libffi-dev libsqlite3-dev \
            libjpeg-dev zlib1g-dev openjdk-8-jdk unzip pkg-config

          python -m pip install --upgrade pip
          pip install -r build_requirements_android.txt

      - name: Inject nightly version into Kivy app script
        run: |
          sed -i "s/__VERSION__/${{ needs.generate-nightly-version.outputs.version }}/" "The Bibites Mod Manager.py"

      - name: Setup Java 17 required by Gradle
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build APK for Android
        run: |
          buildozer init
          yes | buildozer --debug android debug

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: TBMM-Android-${{ matrix.api-level == '29' && 'Android10' || 'Latest' }}
          path: bin/*.apk